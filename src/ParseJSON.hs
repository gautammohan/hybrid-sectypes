{-|

The ParseJSON exports FromJSON instances for all the components of hybrid
systems defined in "Model". This is intended to parse the exact JSON format
generated by slsf2json.m in this package.

-}

{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE TypeSynonymInstances #-}
{-# LANGUAGE OverloadedStrings #-}
{-# OPTIONS_GHC -fno-warn-orphans #-}

module ParseJSON where

import Model
import ParseInternals

import Text.Parsec hiding (label)
import Data.Aeson
import Data.Text (unpack)

instance FromJSON Expr where
  parseJSON v = (pure CExpr) <*> parseJSON v

instance FromJSON Flow where
  parseJSON = withText "flow expression" $ \t ->
    do
      case parse assignments "" (unpack t) of
        Right assns -> pure $ CFlow assns
        Left err -> fail $ show err ++ " in " ++ show t

instance FromJSON Mode where
  parseJSON = withObject "mode object" $ \o ->
    do
      n <- o .: "name"
      label <- o .: "flow"
      case parse flow "" label of
        Right f -> pure $ CMode n f
        Left err -> fail $ show err ++ " in " ++ show label

instance FromJSON Transition where
  parseJSON = withObject "transition object" $ \o ->
    do
      label <- o .: "guard"
      src <- parseJSON =<< o .: "src"
      dest <- parseJSON =<< o .: "dest"
      case parse transition "" label of
        Right (guard,reset) -> pure $ CTransition src dest guard reset
        Left err -> fail $ show err ++ " in " ++ show label

instance FromJSON Model where
  parseJSON = withObject "model object" $ \o ->
    do
      ty <- o .: "ty"
      children <- o .: "children"
      if (ty :: String) == "parmodel"
        then
        pure CParallel <*> mapM parseJSON children
        else do
        ts <- mapM parseJSON =<< o .: "transitions"
        ms <- mapM parseJSON children
        pure $ CModel ms ts
